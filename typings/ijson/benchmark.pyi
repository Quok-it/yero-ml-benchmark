"""
This type stub file was generated by pyright.
"""

'''
Benchmarking utility for ijson
'''
_benchmarks = ...
def benchmark(f):
    ...

@benchmark
def long_list(n): # -> bytes:
    ...

@benchmark
def big_int_object(n): # -> bytes:
    ...

@benchmark
def big_decimal_object(n): # -> bytes:
    ...

@benchmark
def big_null_object(n): # -> bytes:
    ...

@benchmark
def big_bool_object(n): # -> bytes:
    ...

@benchmark
def big_str_object(n): # -> bytes:
    ...

@benchmark
def big_longstr_object(n): # -> bytes:
    ...

@benchmark
def object_with_10_keys(n): # -> bytes:
    ...

@benchmark
def empty_lists(n): # -> bytes:
    ...

@benchmark
def empty_objects(n): # -> bytes:
    ...

def parse_benchmarks(s): # -> list[Any]:
    ...

BACKEND_NAMES = ...
def load_backends(): # -> OrderedDict[Any, Any]:
    ...

_backends = ...
def parse_backends(s): # -> OrderedDict[Any, Any]:
    ...

class progress_message:
    def __init__(self, message) -> None:
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, *args): # -> None:
        ...
    


class AsyncReader:
    def __init__(self, data) -> None:
        ...
    
    async def read(self, n=...): # -> bytes:
        ...
    
    def close(self): # -> None:
        ...
    


def median(values):
    ...

def stats(values): # -> tuple[Any, float, Any, Any]:
    ...

def run_benchmarks(args, benchmark_func=..., fname=...): # -> None:
    ...

def main(): # -> None:
    ...

if __name__ == '__main__':
    ...
